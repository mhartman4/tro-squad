{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Board.svelte",
    "../src/StationPicker.svelte",
    "../src/BusBoard.svelte",
    "../src/BusStopPicker.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Board from \"./Board.svelte\"\n  import BusBoard from \"./BusBoard.svelte\"\n  import StationPicker from \"./StationPicker.svelte\"\n  import BusStopPicker from \"./BusStopPicker.svelte\"\n  \n  let relevantStations = []\n  let relevantStationNames = \"\"\n  let relevantBusStops = []\n\n  let hideBusses\n\n  \n  if (localStorage.getItem(\"relevantStations\")) {\n      relevantStations = JSON.parse(localStorage.getItem(\"relevantStations\"));\n  }\n\n  if (localStorage.getItem(\"relevantBusStops\")) {\n      relevantBusStops = JSON.parse(localStorage.getItem(\"relevantBusStops\"));\n  }\n\n  if (localStorage.getItem(\"hideBusses\")) {\n      hideBusses = JSON.parse(localStorage.getItem(\"hideBusses\"));\n  }\n  else {\n    hideBusses = true\n    localStorage.setItem(\"hideBusses\", JSON.stringify(hideBusses));\n  }\n  \n  $: relevantStationNames = relevantStations.map(station => station.Name)\n  $: relevantBusStops = relevantBusStops\n\n  const toggle = (station) => { \n    if (relevantStations && station) {\n      let i = relevantStationNames.indexOf(station.Name)\n      if (i > -1) {\n        relevantStations = [...relevantStations.slice(0, i), ...relevantStations.slice(i + 1)];\n        gtag('event', 'removeStation', {\"station\": station, \"button\": \"top-button\"})\n      }\n      else {        \n        relevantStations = [...relevantStations, station]\n      }\n      localStorage.setItem(\"relevantStations\", JSON.stringify(relevantStations));\n    }\n  }\n\n  const toggleBusStop = (stop) => { \n    console.log(\"Toggle\")   \n    if (relevantBusStops && stop) {\n      let i = relevantBusStops.indexOf(stop)\n      console.log(i)\n      if (i > -1) {\n        console.log(\"Remove stop\")        \n        relevantBusStops = [...relevantBusStops.slice(0, i), ...relevantBusStops.slice(i + 1)];\n        gtag('event', 'removeBusStop', {\"stop\": stop, \"button\": \"top-button\"})\n      }\n      else {\n        relevantBusStops = [...relevantBusStops, stop]\n      }\n      localStorage.setItem(\"relevantBusStops\", JSON.stringify(relevantBusStops));\n    }\n  }\n\n  const toggleBusMode = () => {\n    hideBusses = !hideBusses\n    localStorage.setItem(\"hideBusses\", JSON.stringify(hideBusses));\n  }\n  \n</script>\n\n<div class=\"relevant-stations\">\n  {#each relevantStations as station}\n    <span class=\"station\" on:click={() => toggle(station)}>{station.Name.length > 20 ? station.Name.substring(0,20) : station.Name}\n    </span>\n  {/each}\n</div>\n\n{#if !hideBusses}\n  <div class=\"relevant-stations\">\n    {#each relevantBusStops as stop}\n      <span class=\"bus-stop\" on:click={() => toggleBusStop(stop)}>{stop.Name + \" (\" + stop.StopID + \")\"}</span>\n    {/each}\n  </div>\n{/if}\n<StationPicker bind:relevantStations={relevantStations} bind:hideBusses={hideBusses}/>\n\n{#if !hideBusses}\n  <BusStopPicker bind:relevantBusStops={relevantBusStops}/>\n{/if}\n\n<Board bind:relevantStationNames={relevantStationNames} bind:hideBusses={hideBusses} />\n{#if !hideBusses}\n  <BusBoard bind:relevantBusStops={relevantBusStops}/>\n{/if}\n\n<br>\n<button id=\"hide-busses\" on:click={() => toggleBusMode()}>{hideBusses ? \"ðŸšŒ Show Busses too!\" : \"ðŸšŒ Hide Busses\"}</button>\n\n<style>\n  .station {\n    background-color: #e5e1e1;;\n    border-radius: 5px;\n    padding: 2px;\n    margin: 2px;\n    text-align: center;\n    color: #ff5441;\n  }\n\n  .bus-stop {\n    background-color: #78a6ee;;\n    border-radius: 5px;\n    padding: 2px;\n    margin: 2px;\n    text-align: center;\n    color: #394d76;\n/*    font-family: \"Open Sans\";*/\n/*    font-size: 12px;*/\n  }\n\n  .relevant-stations {\n    margin: 5px;\n    display: flex;\n    width: 100%;\n  }\n\n  #hide-busses {\n    background-color: #394d76;\n    color: white;\n    border-width: 0px;\n  }\n</style>\n",
    "<script>\n  import { onMount } from \"svelte\"\n  let trainPredictions, secondsSinceLastUpdate, updatedAt;\n  export let relevantStationNames;\n  export let hideBusses\n\n  onMount(async () => {\n    getTrainPredictions()\n    setInterval(function(){\n      secondsSinceLastUpdate = Math.round((new Date() - updatedAt) / 1000)\n      // if (secondsSinceLastUpdate >= 30) {\n      //   getTrainPredictions()\n      // }\n    }, 1000);\n  })\n\n  const getTrainPredictions = async () => {\n    const response = await fetch(`./train_predictions`)\n    trainPredictions = await response.json()\n    updatedAt = await new Date()\n    secondsSinceLastUpdate = Math.round((new Date() - updatedAt) / 1000)\n  }\n\n  const refresh = () => {\n    trainPredictions = null\n    getTrainPredictions()\n    gtag('event', 'refresh', {})\n  }\n\n</script>\n<a href=\"#\" on:click={() => refresh() }>ðŸ”„</a>\nlast updated {secondsSinceLastUpdate} seconds ago\n{#if relevantStationNames}\n  {#each relevantStationNames as station}\n    <h1 class=\"board-station\">{hideBusses ? \"\" : \"ðŸš†\"} {station.length > 20 ? station.substring(0,20) : station}</h1>\n    {#if trainPredictions}\n      <table>\n      {#each trainPredictions as train}\n        {#if train.LocationName == station && train.Destination != \"ssenger\"}\n          <tr class=\"train\">\n            <td><span class=\"dot {train.Line}\"></span></td>\n            <td>{train.Destination}&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <td>{train.Min}</td>\n          </tr>\n        {/if}\n      {/each}\n      </table>\n    {:else}\n      Loading...\n    {/if}\n  {/each}\n{/if}\n\n\n\n<style>\n  .board-station {\n    text-transform: uppercase;\n    color: #FF5442;\n    margin-bottom: 3px;\n  }\n  .train {\n    text-transform: uppercase;\n    color: #FFF068;\n    font-size: 22px;\n  }\n</style>",
    "<script>\n  import { onMount } from \"svelte\"\n  let allStations\n  let query = \"\"\n  let searchResults = []\n  let placeholder = \"Add train stations\"\n  export let relevantStations, hideBusses\n  $: relevantStationNames = relevantStations.map(station => station.Name)\n  // $: placeholder = relevantStations.length == 0 ? \"Add stations\" : \"\"\n  onMount(async () => {\n    allStations = await getStations()\n    searchResults = []\n  })\n\n  const getStations = async () => {\n    const response = await fetch(`./stations`)\n    return response.json()\n  }\n\n  const searchStations = () => {\n    if (query == \"\") {\n      return searchResults = []\n    }\n    else {\n      return searchResults = allStations.filter(station => {\n        gtag('event', 'stationSearch', {\"query\": query})\n        let stationName = station.Name.toLowerCase().replace(\"'\", \"\");\n        return stationName.includes(query.toLowerCase().replace(\"'\", \"\"))\n      })\n    } \n    \n  }\n\n  const toggle = (station) => { \n    if (relevantStations && station) {\n      let i = relevantStationNames.indexOf(station.Name)\n      if (i > -1) {\n        relevantStations = [...relevantStations.slice(0, i), ...relevantStations.slice(i + 1)];\n      }\n      else {        \n        relevantStations = [...relevantStations, station]\n      }\n      localStorage.setItem(\"relevantStations\", JSON.stringify(relevantStations));\n      gtag('event', 'addStation', {\"station\": station})\n    }\n    query = \"\"\n    searchStations()\n  }\n\n\n\n  \n</script>\n<input type=\"text\" id=\"search\" placeholder=\"{hideBusses ? \"\" : \"ðŸš†\"} {placeholder}\" bind:value={query} on:input={searchStations}>\n<table>\n{#each searchResults as station}\n    <tr class=\"station\">\n      <td>\n        <button on:click={() => toggle(station)} class=\"{relevantStationNames.indexOf(station.Name) > -1 ? \"is-relevant\" : \"\"}\" autocomplete=\"off\">\n          {station.Name.length > 20 ? station.Name.substring(0,20) : station.Name}\n          {#each station.Lines as line}\n            {#if line}\n              <span class=\"dot {line}\"></span>\n            {/if}\n          {/each}\n        </button>\n      </td>\n      <!-- {JSON.stringify(station)} -->\n    </tr>\n  \n{/each}\n</table>    \n\n\n\n<style>\n  \n  .station {\n    text-transform: uppercase;\n    color: #FFF068;\n    margin-bottom: 3px;\n  }\n  .lines {\n    text-align: left;\n  }\n  #search {\n    text-transform: uppercase;\n    color: #FF5442;\n    font-size: 22px;\n    background-color: #21292f;\n    width: 100%;\n    border-width: 1px;\n    border-radius: 10px;\n  }\n  ::placeholder {\n    color: #FFF068;\n    opacity: 1; \n  }\n  .is-relevant {\n    background-color: #ffffffeb;\n    color: black;\n  }\n</style>",
    "<script>\n  \n  let busPredictions;\n  export let relevantBusStops;\n\n  const getBusPredictions = async (stops) => {\n    const response = await fetch(`./bus_predictions/` + JSON.stringify(stops.map(stop => {return stop.StopID})))\n    busPredictions = await response.json()\n  }\n  \n  $: getBusPredictions(relevantBusStops)\n\n\n</script>\n{#if relevantBusStops}\n  {#each relevantBusStops as stop}\n    <h1 class=\"board-stop\">ðŸšŒ {stop.Name}<span class=\"stop-id\">{stop.StopID}</span></h1>\n    \n    {#if busPredictions && busPredictions[stop.StopID]}\n      <table>\n        {#each busPredictions[stop.StopID] as bus}\n          <tr class=\"bus\">\n            <td><span class=\"route\">{bus.RouteID}</span></td>\n            <td>{bus.DirectionText}&nbsp;&nbsp;&nbsp;&nbsp;</td>\n            <td>{bus.Minutes}</td>\n          </tr>\n        {/each}\n      </table>\n    {:else}\n      Loading...\n    {/if}\n  {/each}\n{/if}\n\n<style>\n  .board-stop {\n    text-transform: uppercase;\n    color: #78a6ee;\n    margin-bottom: 3px;\n    font-size: 28px;\n  }\n  .bus {\n    color: white;\n    font-size: 20px;\n  }\n  .stop-id {\n    background-color: #78a6ee;\n    color: #394d76;\n    margin: 2px;\n    border-radius: 6px;\n    padding: 2px;\n    font-size: 18px;\n  }\n  \n  .route {\n    color: white;\n    padding: 0px 7px;\n    background-color: rgb(157 31 26);\n  }\n  .stop-number {\n    background-color: white;\n    color: rgb(43 45 93);\n  }\n</style>",
    "<script>\n  import { onMount } from \"svelte\"\n  let allBusStops\n  let query = \"\"\n  let searchResults = []\n  let placeholder = \"Add bus stops\"\n  let busPredictions\n  export let relevantBusStops\n  $: relevantBusStopNames = relevantBusStops.map(stop => stop.Name + \" (\" + stop.StopID + \")\")\n  // $: console.log(searchResults)\n  \n  onMount(async () => {\n    allBusStops = await getBusStops()\n    searchResults = []\n\n  })\n\n  const getBusStops = async () => {\n    const response = await fetch(`./bus_stops`)\n    let stops = await response.json()\n    stops.forEach(s => {\n      s.stopNameForSearch = s.Name.toLowerCase().replace(\"'\", \"\") + \" (\" + s.StopID + \")\";\n    })\n    return stops\n  }\n\n  const searchBusStops = () => {\n    if (query == \"\") {\n      return searchResults = []\n    }\n    else {\n      return searchResults = allBusStops.filter(stop => {\n        gtag('event', 'busStopSearch', {\"query\": query})\n        return stop.stopNameForSearch.includes(query.toLowerCase().replace(\"'\", \"\"))\n      })\n    } \n    \n  }\n\n  const toggle = (stop) => { \n    if (relevantBusStops && stop) {\n      let i = relevantBusStopNames.indexOf(stop.Name + \" (\" + stop.StopID + \")\")\n      if (i > -1) {\n        relevantBusStops = [...relevantBusStops.slice(0, i), ...relevantBusStops.slice(i + 1)];\n      }\n      else {        \n        relevantBusStops = [...relevantBusStops, stop]\n      }\n      localStorage.setItem(\"relevantBusStops\", JSON.stringify(relevantBusStops));\n      gtag('event', 'addBusStop', {\"stop\": stop})\n    }\n    query = \"\"\n    searchBusStops()\n  }\n\n\n\n  \n</script>\n<input type=\"text\" id=\"search\" placeholder=\"ðŸšŒ {placeholder}\" bind:value={query} on:input={searchBusStops}>\n<table>\n{#each searchResults as stop}\n    <tr class=\"stop\">\n      <td>\n        <button on:click={() => toggle(stop)} class=\"stop-result {relevantBusStopNames.indexOf(stop.Name) > -1 ? \"is-relevant\" : \"\"}\" autocomplete=\"off\">\n          <span>{stop.Name}</span>\n          <div>\n            <span class=\"stop-id\">{stop.StopID}</span>\n          </div>\n          <div class=\"routes\">\n            {#each stop.Routes as route}\n              {#if !route.includes(\"*\") && !route.includes(\"/\")}\n                <span class=\"route\">{route}</span>\n              {/if}\n            {/each}\n          </div>\n        </button>\n      </td>\n      <!-- {JSON.stringify(station)} -->\n    </tr>\n  \n{/each}\n</table>    \n\n\n\n<style>\n  \n  .stop {\n    text-transform: uppercase;\n    color: #FFF068;\n    margin-bottom: 3px;\n/*    font-family: \"Open Sans\";*/\n  }\n  #search {\n    text-transform: uppercase;\n/*    font-family: \"Open Sans\";*/\n    color: #78a6ee;\n    font-size: 22px;\n    background-color: #21292f;\n    width: 100%;\n    border-width: 1px;\n    border-radius: 10px;\n  }\n  ::placeholder {\n    color: #78a6ee;\n    opacity: 1; \n  }\n  .is-relevant {\n    background-color: #ffffffeb;\n    color: black;\n  }\n  .route {\n    background-color: red;\n    color: white;\n    margin-right: 2px;\n    border-radius: 6px;\n    padding: 2px;\n  }\n  .stop-id {\n    background-color: #5977b5;\n    color: white;\n    margin: 2px;\n    border-radius: 6px;\n    padding: 2px;\n    font-size: 18px;\n  }\n  .stop-result {\n    text-align: left;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}